generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("staff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[] @relation("CreatedBy")
}

model Member {
  id              String     @id @default(uuid())
  firstName       String
  lastName        String
  email           String?    @unique
  phoneNumber     String?
  membershipType  String
  balance         Float      @default(0)
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  idFront         String?
  idBack          String?
  appLinked       Boolean    @default(false)
  username        String?    @unique
  createdById     String
  referredById    String?
  donations       Donation[]
  createdBy       User       @relation("CreatedBy", fields: [createdById], references: [id])
  referredBy      Member?    @relation("Referrals", fields: [referredById], references: [id])
  referredMembers Member[]   @relation("Referrals")
  orders          Order[]
}

model Product {
  id              String      @id @default(uuid())
  name            String
  category        String
  description     String?
  price           Float
  unit            String
  stock           Float       @default(0)
  jarWeight       Float?
  displayOnApp    Boolean     @default(true)
  allowGifting    Boolean     @default(false)
  ignoreDiscounts Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  total     Float
  status    String      @default("completed")
  createdAt DateTime    @default(now())
  memberId  String
  member    Member      @relation(fields: [memberId], references: [id])
  items     OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Float
  price     Float
  orderId   String
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Donation {
  id        String   @id @default(uuid())
  amount    Float
  method    String
  createdAt DateTime @default(now())
  memberId  String?
  member    Member?  @relation(fields: [memberId], references: [id])
}

model Workstation {
  id            String  @id @default(uuid())
  name          String  @unique
  hasTerminal   Boolean @default(false)
  isTillEnabled Boolean @default(false)
}

model BusinessDay {
  id           String    @id @default(uuid())
  openedAt     DateTime  @default(now())
  closedAt     DateTime?
  initialFloat Float
  isOpen       Boolean   @default(true)
  shifts       Shift[]
}

model Shift {
  id            String      @id @default(uuid())
  startedAt     DateTime    @default(now())
  endedAt       DateTime?
  cashOut       Float?
  businessDayId String
  businessDay   BusinessDay @relation(fields: [businessDayId], references: [id])
}
