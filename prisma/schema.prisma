generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("staff")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   Member[] @relation("CreatedBy")
}

model Member {
  id             String   @id @default(uuid())
  firstName      String
  lastName       String
  email          String?  @unique
  phoneNumber    String?
  membershipType String
  tokenBalance   Float    @default(0) // Changed from 'balance' to 'tokenBalance'
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  idFront        String?
  idBack         String?
  appLinked      Boolean  @default(false)
  username       String?  @unique
  createdById    String
  referredById   String?

  // Relationships
  donations         Donation[]
  tokenTransactions TokenTransaction[] // New: Track token movements
  createdBy         User               @relation("CreatedBy", fields: [createdById], references: [id])
  referredBy        Member?            @relation("Referrals", fields: [referredById], references: [id])
  referredMembers   Member[]           @relation("Referrals")
  orders            Order[]
}

// New model to track token transactions
model TokenTransaction {
  id          String   @id @default(uuid())
  memberId    String
  amount      Float // Positive for credits, negative for debits
  type        String // "DONATION", "PURCHASE", "ADJUSTMENT", "REFUND"
  description String? // Optional description
  relatedId   String? // Related donation or order ID
  createdAt   DateTime @default(now())

  member Member @relation(fields: [memberId], references: [id])
}

model Product {
  id              String      @id @default(uuid())
  name            String
  category        String
  description     String?
  tokenPrice      Float // Changed from 'price' to 'tokenPrice'
  unit            String
  stock           Float       @default(0)
  jarWeight       Float?
  displayOnApp    Boolean     @default(true)
  allowGifting    Boolean     @default(false)
  ignoreDiscounts Boolean     @default(false)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]
}

model Order {
  id          String   @id @default(uuid())
  totalTokens Float // Changed from 'total' to 'totalTokens'
  status      String   @default("completed")
  createdAt   DateTime @default(now())
  memberId    String

  member Member      @relation(fields: [memberId], references: [id])
  items  OrderItem[]
}

model OrderItem {
  id         String @id @default(uuid())
  quantity   Float
  tokenPrice Float // Changed from 'price' to 'tokenPrice'
  orderId    String
  productId  String

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Donation {
  id           String   @id @default(uuid())
  amount       Float // Cash amount donated (in Rands)
  tokensIssued Float // Tokens issued (should equal amount in 1:1 ratio)
  method       String // "cash", "card", "eft"
  createdAt    DateTime @default(now())
  memberId     String?

  member Member? @relation(fields: [memberId], references: [id])
}

model Workstation {
  id            String  @id @default(uuid())
  name          String  @unique
  hasTerminal   Boolean @default(false)
  isTillEnabled Boolean @default(false)
}

model BusinessDay {
  id           String    @id @default(uuid())
  openedAt     DateTime  @default(now())
  closedAt     DateTime?
  initialFloat Float
  isOpen       Boolean   @default(true)
  shifts       Shift[]
}

model Shift {
  id            String      @id @default(uuid())
  startedAt     DateTime    @default(now())
  endedAt       DateTime?
  cashOut       Float?
  businessDayId String
  businessDay   BusinessDay @relation(fields: [businessDayId], references: [id])
}
